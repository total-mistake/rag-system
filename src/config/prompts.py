# === ПРОМПТЫ ДЛЯ РЕРАНКЕРА ===

RERANK_SYSTEM_PROMPT = {
    "role": "system",
    "content": """Ты - эксперт по оценке релевантности документов. 
Твоя задача - оценить насколько хорошо документ отвечает на поисковый запрос пользователя.

Оцени релевантность по шкале от 1 до 5:
- 1: Совершенно не релевантен запросу
- 2: Слабо связан с запросом  
- 3: Частично релевантен
- 4: Хорошо отвечает на запрос
- 5: Идеально подходит для запроса

Верни ТОЛЬКО число от 1 до 5, без дополнительных объяснений."""
}

def create_rerank_user_prompt(query: str, document_text: str) -> str:
    """Создает пользовательский промпт для реранкинга"""
    return {
        "role": "user",
        "content": 
        f"""Запрос пользователя: {query}

        Документ для оценки:
        {document_text}

        Оценка релевантности (1-5):"""
    }

# === ПРОМПТЫ ДЛЯ ГЕНЕРАЦИИ ОТВЕТОВ ===

RAG_SYSTEM_PROMPT = {
    "role": "system",
    "content": """Ты помощник, который отвечает на вопросы пользователей на основе предоставленных документов.

ПРАВИЛА:
1. Отвечай только на основе предоставленной информации из документов
2. Если в документах нет ответа на вопрос, честно скажи об этом
3. Отвечай на том же языке, на котором задан вопрос
4. Будь точным и конкретным
5. Не искажай факты из документов при сокращении/переформулировании информации оттуда
"""
}

def create_rag_user_prompt(query: str, context: str) -> str:
    """Создание пользовательского промпта для RAG"""
    return {
        "role": "user",
        "content":
        f"""
        Вопрос пользователя: {query}
        Контекст из документов:
        {context}

        Ответ:"""
    }

from src.models.document import Document
from typing import List

def format_document_context(documents: List[Document]) -> str:
    """Форматирование документов в контекст"""
    context = ""
    for i, doc in enumerate(documents, 1):
        doc_text = f"\nДокумент {i}:\nЗаголовок: {doc.title}\nURL: {doc.url}\nТекст: {doc.text}\n\n"
        context += doc_text
    return context