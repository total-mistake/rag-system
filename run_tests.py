#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞
"""
import subprocess
import sys
import argparse
import time


def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")
    print("-" * 50)
    
    start_time = time.time()
    result = subprocess.run(cmd, capture_output=True, text=True)
    end_time = time.time()
    
    if result.stdout:
        print(result.stdout)
    if result.stderr:
        print("STDERR:", result.stderr)
    
    print("-" * 50)
    print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    print()
    
    return result.returncode == 0


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞")
    parser.add_argument("--all", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--integration", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--search", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    parser.add_argument("--coverage", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--test", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç")
    parser.add_argument("--fast", action="store_true", help="–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ)")
    
    args = parser.parse_args()
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ pytest
    cmd = ["python", "-m", "pytest"]
    
    if args.verbose:
        cmd.extend(["-v", "-s"])  # -s –¥–ª—è –≤—ã–≤–æ–¥–∞ print'–æ–≤
    
    # –í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
    if args.search:
        cmd.extend(["-m", "search"])
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –í–ï–ö–¢–û–†–ù–û–ì–û –ü–û–ò–°–ö–ê...")
    elif args.integration:
        cmd.extend(["-m", "integration"])
        print("üîó –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï —Ç–µ—Å—Ç—ã...")
    elif args.test:
        cmd.extend(["-k", args.test])
        print(f"üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç: {args.test}")
    else:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –í–°–ï –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...")
        cmd.append("tests/test_indexer_integration.py")
    
    # –ü—Ä–æ–ø—É—Å–∫ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if args.fast:
        cmd.extend(["-m", "not slow"])
        print("‚ö° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    
    # –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
    if args.coverage:
        cmd.extend([
            "--cov=src",
            "--cov-report=html",
            "--cov-report=term-missing"
        ])
        print("üìä –° –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞")
    
    print()
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ ChromaDB")
    print("‚è±Ô∏è  –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏")
    print("üíæ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    print()
    
    success = run_command(cmd)
    
    if success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        if args.coverage:
            print("üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ htmlcov/index.html")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
        sys.exit(1)


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if len(sys.argv) == 1:
        print("üß™ –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞")
        print()
        print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–∏ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –ë–î!")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("  python run_tests.py --all              # –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print("  python run_tests.py --integration      # –¢–µ—Å—Ç—ã –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        print("  python run_tests.py --search           # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞")
        print("  python run_tests.py --fast             # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–±–µ–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö)")
        print("  python run_tests.py --coverage         # –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
        print("  python run_tests.py --test vector      # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç")
        print("  python run_tests.py -v --search        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
        print()
        print("–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        sys.argv.append("--all")
    
    main()